generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(cuid())
  email           String          @unique
  password        String
  role            UserRole        @default(STUDENT)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  hasProfile      Boolean         @default(false)
  bookedSessions  Booking[]       @relation("StudentBookings")
  mentorProfile   MentorProfile?
  createdSessions Session[]       @relation("MentorSessions")
  studentProfile  StudentProfile?

  @@map("users")
}

model StudentProfile {
  id                     String         @id @default(cuid())
  userId                 String         @unique
  fullName               String
  age                    Int
  contactNumber          String
  currentEducationLevel  EducationLevel
  school                 String
  subjectsOfInterest     String
  currentYear            Int
  skillLevels            Json
  preferredLearningStyle LearningStyle
  learningDisabilities   String?
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  user                   User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("student_profiles")
}

model MentorProfile {
  id                 String   @id @default(cuid())
  userId             String   @unique
  fullName           String
  age                Int
  contactNumber      String
  expertise          String?
  experience         Int?
  bio                String?
  hourlyRate         Float?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  currentLocation    String
  email              String
  githubPortfolio    String?
  linkedinProfile    String
  preferredLanguage  String
  preferredLevels    Json
  professionalRole   String
  profilePictureUrl  String?
  shortBio           String
  subjects           Json
  teachingExperience String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mentor_profiles")
}

model Session {
  id          String    @id @default(cuid())
  mentorId    String
  title       String
  description String
  subject     String
  duration    Int
  price       Float
  maxStudents Int       @default(1)
  date        DateTime
  time        String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]
  mentor      User      @relation("MentorSessions", fields: [mentorId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Booking {
  id              String        @id @default(cuid())
  sessionId       String
  studentId       String
  status          BookingStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  bookedDate      String?
  bookedTime      String?
  paymentSlipUrl  String?
  session         Session       @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  student         User          @relation("StudentBookings", fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([sessionId, studentId])
  @@map("bookings")
}

model Sample {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples")
}

enum UserRole {
  STUDENT
  MENTOR
}

enum EducationLevel {
  GRADE_9
  ORDINARY_LEVEL
  ADVANCED_LEVEL
}

enum LearningStyle {
  VISUAL
  HANDS_ON
  THEORETICAL
  MIXED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
